// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  JUDGE
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(254)
  email     String   @unique @db.VarChar(254)
  password  String   @db.VarChar(254)
  Role      Role     @default(USER)
  Profile   Profile?
  Photo     Photo[]
  Album     Album[]
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
}

model Profile {
  userid       Int      @id
  User         User     @relation(fields: [userid], references: [id], onDelete: Cascade)
  name         String?  @db.VarChar(254)
  address      String?
  profilephoto String?
  coverphoto   String?
  createdat    DateTime @default(now())
  updatedat    DateTime @updatedAt
}

model Photo {
  id          Int          @id @default(autoincrement())
  title       String?      @db.VarChar(254)
  description String?
  path        String       @unique
  PhotoDetail PhotoDetail?
  User        User         @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid      Int
  Album       Album[]
  Tag         Tag[]
  createdat   DateTime     @default(now())
  updatedat   DateTime     @updatedAt
}

model PhotoDetail {
  path         String   @unique
  Photo        Photo    @relation(fields: [photoid], references: [id], onDelete: Cascade)
  photoid      Int      @unique
  isprivate    Boolean? @default(false)
  views        Int?     @default(0)
  likes        Int?     @default(0)
  downloaded   Int?     @default(0)
  starrating   Float?   @default(0)
  camera       String?
  shutterspeed String?
  aperture     String?
  focallength  String?
  iso          String?
}

model Album {
  id           Int      @id @default(autoincrement())
  title        String   @unique
  description  String?
  coverphotoid Int?
  User         User     @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid       Int
  isprivate    Boolean? @default(false)
  Photo        Photo[]
  createdat    DateTime @default(now())
  updatedat    DateTime @updatedAt
}

model Tag {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(64)
  Photo Photo[]
}

// model Contest {
//   id Int @id @default(autoincrement())
//   name String @db.VarChar(255)
//   description String
//   startdate DateTime @default(now())
//   enddate DateTime
//   winneruserid Int[]
//   winnerphotoid Photo[]
// }
