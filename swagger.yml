openapi: 3.0.1
info:
  title: Photo Contest
  description: 'This is Glints PTB1 Final Project.  
    Github project at [https://github.com/ptbglints/photocontest](https://github.com/ptbglints/photocontest)  
    For this sample, you can use the api key `special-key` to test the authorization filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: "Find more info here"
  url: "https://example.com"
servers:
- url: http://localhost:8000/api
- url: https://ptb-photocontest.herokuapp.com/api
tags:
- name: User
- name: Profile
- name: Photos
- name: Upload

paths:
  /users:
    get:
      tags:
        - User
      summary: Get all user
      description: >
        A detailed description of the operation.
        Use markdown for rich text representation,
      operationId: getMany
      # parameters:
      #   - name: id
      #     in: path
      #     description: User ID
      #     required: true
      #     schema:
      #       type: integer
      #       format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/User'

  /users/signup:
    post:
      tags:
      - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'jokox'
                email:
                  type: string
                  example: 'jkx@mantab.io'
                password:
                  type: string
                  example: 'Pass123?'
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body

  /users/login:
    post:
      tags:
      - User
      summary: User login
      # description: This can only be done by the logged in user.
      # operationId: createUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'arman'
                password:
                  type: string
                  example: 'Pass123?'
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body

  /users/profile/id/{id}:
    get:
      tags:
        - Profile
      summary: Gets profile by Id
      # description:
      # operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
            example: 4
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  
  /users/profile/id/:
    put:
      tags:
      - Profile
      summary: Update user profile by Id
      # description: This can only be done by the logged in user.
      # operationId: createUser
      requestBody:
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 4
                name:
                  type: string
                  example: 'Arman Maulalan'
                # address:
                #   type: string
                #   example: 'Jl. Pinang Kayu no.30 Bandung'
                # profilephoto:
                #   type: string
                # coverphoto:
                #   type: string
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body                

  /users/profile/username/{username}:
    get:
      tags:
        - Profile
      summary: Gets profile by Username
      # description:
      # operationId: getUserById
      parameters:
        - name: username
          in: path
          description: User name
          required: true
          schema:
            type: string
            example: 'alice'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'

  /users/profile/username/:
    put:
      tags:
      - Profile
      summary: Update user profile by username
      # description: This can only be done by the logged in user.
      # operationId: createUser
      requestBody:
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'arman'
                name:
                  type: string
                  example: 'Arman Bojongsoang'
                address:
                  type: string
                  example: 'Jl. Timor no.28 Soroako'
                profilephoto:
                  type: string
                coverphoto:
                  type: string
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body

  /photos:
    get:
      tags:
        - Photos
      summary: Get all photos from logged in user.
      description: >
        use JWT to identify which user id who wants get all their photo
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/Photos'
                  
  /photos:{id}:
    get:
      tags:
        -Photos
      summary: Get spesific photo from logged in user.
      parameters:
        - name: id
          in: path
          description: Photo ID
          required: true
          schema:
            type: integer
            format: int64
            example: 4
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photos'

  /upload:
    post:
      tags:
      - Upload
      summary: Upload photo to collection User
      description: Logged user only
      operationId: uploadePhoto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                userId:
                  type: integer
                fileName:
                  type: string
                  format: binary
                  
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
      
      
components:
  requestBodies:
    PetBody:
      description: A JSON object containing pet information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
          minLength: 8
          maxLength: 254
        role:
          type: string
        createdat:
          type: string
          format: date-time
        updatedat:
          type: string
          format: date-time

    Profile:
      type: object
      properties:
        name:
          type: string
        addres:
          type: string
        profilephoto:
          type: string
        coverphoto:
          type: string
        userid:
          type: integer
          format: int64
        createdat:
          type: string
          format: date-time
        updatedat:
          type: string
          format: date-time

    Photos:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        path:
          type: string
        userid:
          type: integer
          format: int64
        createdat:
          type: string
          format: date-time
        updatedat:
          type: string
          format: date-time